{"version":3,"sources":["components/Form/Form.module.css","components/Search/Search.module.css","redux/actions.js","redux/contactsOperations.js","redux/selectors.js","components/Form/Form.js","components/Contacts/Contact.js","components/Contacts/Contacts.js","components/Search/Search.js","App.js","redux/contactsReducer.js","redux/filterReducer.js","redux/store.js","index.js","components/Contacts/Contacts.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","BASE_URL","getContacts","state","contacts","items","getFilter","filter","getFilteredContacts","createSelector","lowerCasedFilter","toLowerCase","contact","name","includes","Form","contactList","dispatch","useDispatch","useState","setName","number","setNumber","handleInputChange","event","target","inputName","value","reset","onSubmit","newContactData","map","preventDefault","Toastr","fetch","method","body","JSON","stringify","headers","then","data","json","catch","error","type","onChange","pattern","title","required","className","s","input","button","Contact","id","item","text","onClick","deleteContact","Contacts","list","Search","label","actions","App","useEffect","useSelector","isLoading","loading","getLoading","filteredContacts","document","style","cursor","createReducer","payload","_","contactsReducer","combineReducers","filterReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","rootReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5e0a9499.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Form_input__22LkG\",\"button\":\"Form_button__1DZ6j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Search_label__biDqz\",\"input\":\"Search_input__3WUR8\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const filterContacts = createAction('filter/filter');\r\n","import {\r\n  addContactRequest,\r\n  addContactError,\r\n  addContactSuccess,\r\n  deleteContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  fetchContactsError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n} from './actions';\r\n\r\nconst BASE_URL = '//localhost:3000';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  fetch(`${BASE_URL}/contacts`)\r\n    .then(data => data.json())\r\n    .then(data => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nexport const addContact = newContactData => dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  fetch(`${BASE_URL}/contacts`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(newContactData),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  })\r\n    .then(data => data.json())\r\n    .then(data => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  fetch(`${BASE_URL}/contacts/${id}`, {\r\n    method: 'DELETE',\r\n  })\r\n    .then(dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n","import { createSelector } from 'reselect';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getLoading = state => state.contacts.loading;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const lowerCasedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(lowerCasedFilter),\n    );\n  },\n);\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as Toastr from 'toastr';\r\nimport { addContact } from '../../redux/contactsOperations';\r\nimport '../../../node_modules/toastr/build/toastr.css';\r\nimport s from './Form.module.css';\r\n\r\nfunction Form({ contactList }) {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = event => {\r\n    const { name: inputName, value } = event.target;\r\n\r\n    if (inputName === 'name') {\r\n      setName(value);\r\n    } else if (inputName === 'number') {\r\n      setNumber(value);\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    const contacts = contactList.map(contact => contact.name.toLowerCase());\r\n\r\n    event.preventDefault();\r\n\r\n    if (contacts.includes(name.toLowerCase())) {\r\n      Toastr.error(`${name} is already in contacts`);\r\n      reset();\r\n      return;\r\n    }\r\n    dispatch(addContact({ name, number }));\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={handleInputChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            className={s.input}\r\n          />\r\n        </label>\r\n        <label>\r\n          Number:\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={handleInputChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            className={s.input}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n\r\nForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n  contactList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n","import { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { deleteContact } from '../../redux/contactsOperations';\r\nimport s from './Contacts.module.css';\r\n\r\nfunction Contact({ id, name, number }) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <li className={s.item}>\r\n      <p className={s.text}>\r\n        {name}: {number}\r\n      </p>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => dispatch(deleteContact(id))}\r\n        className={s.button}\r\n      >\r\n        X\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Contact;\r\n\r\nContact.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func,\r\n};\r\n","import s from './Contacts.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport Contact from './Contact';\r\n\r\nfunction Contacts({ contacts }) {\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(contact => (\r\n        <Contact\r\n          key={contact.id}\r\n          id={contact.id}\r\n          name={contact.name}\r\n          number={contact.number}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default Contacts;\r\n\r\nContacts.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  onDelete: PropTypes.func,\r\n};\r\n","import { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as actions from '../../redux/actions';\r\nimport s from './Search.module.css';\r\n\r\nfunction Search({ value }) {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name:\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={event => dispatch(actions.filterContacts(event.target.value))}\r\n        className={s.input}\r\n      ></input>\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n\r\nSearch.propTypes = {\r\n  value: PropTypes.string,\r\n  onSearch: PropTypes.func,\r\n};\r\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from './redux/contactsOperations';\nimport {\n  getContacts,\n  getFilter,\n  getFilteredContacts,\n  getLoading,\n} from './redux/selectors';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport Search from './components/Search/Search';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, []);\n\n  const contacts = useSelector(state => getContacts(state));\n  const filter = useSelector(state => getFilter(state));\n  const isLoading = useSelector(state => getLoading(state));\n  const filteredContacts = useSelector(state => getFilteredContacts(state));\n\n  const setLoader = () => {\n    if (isLoading) {\n      document.body.style.cursor = 'wait';\n    } else document.body.style.cursor = 'default';\n  };\n\n  setLoader();\n\n  return (\n    <div className=\"wrapper\">\n      <h1 className=\"main-title\">Phonebook</h1>\n      <Form contactList={contacts} />\n      <h2 className=\"title\">Contacts</h2>\n      <Search value={filter} />\n      <Contacts contacts={filteredContacts} />\n    </div>\n  );\n}\n\nexport default App;\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n  addContactSuccess,\n  addContactRequest,\n  addContactError,\n  deleteContactSuccess,\n  deleteContactError,\n  deleteContactRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  fetchContactsRequest,\n} from './actions';\n\nconst items = createReducer([], {\n  [addContactSuccess]: (state, { payload }) => [\n    ...state,\n    {\n      ...payload,\n    },\n  ],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n});\n\nconst contactsReducer = combineReducers({ items, loading });\n\nexport default contactsReducer;\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { filterContacts } from './actions';\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default filterReducer;\r\n","import {\n  configureStore,\n  combineReducers,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contactsReducer';\nimport filterReducer from './filterReducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n});\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// export const persistor = persistStore(store);\nexport default store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\nimport './index.css';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contacts_list__11zOK\",\"text\":\"Contacts_text__1U6yv\",\"item\":\"Contacts_item__Yw_lp\",\"button\":\"Contacts_button__3Wgij\"};"],"sourceRoot":""}